<div class="justify-content-end d-flex">
    <nav>
        <ul class="pagination">
            @foreach (var link in Links)
            {
                <li @onclick=@(() => InternalSelectedPage(link)) style="cursor: pointer; @(int.TryParse(link.Text, out int _)? "width: 2.5rem" : "")" class="page-item @(link.Enable ? null : "disabled") @(link.Active ? "active" : null)">
                    <a class="page-link">@link.Text</a>
                </li>
            }
        </ul>
    </nav>
</div>
@code {
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int TotalPages { get; set; }
    [Parameter] public int Radio { get; set; } = 10;
    [Parameter] public bool SecuencialPagination { get; set; } = true;
    [Parameter] public EventCallback<int> SelectedPage { get; set; }

    const string previousLinkPageText = "Anterior";
    const string nextLinkPageText = "Siguiente";
    const string firstLinkPageText = "Primera";
    const string lastLinkPageText = "Ultima";

    List<PageModel> Links = new();

    private int previousLinkPage { get => CurrentPage - 1; }
    private int nextLinkPage { get => CurrentPage + 1; }
    private int endRadioPage { get => (int)(Math.Ceiling((decimal)CurrentPage / Radio) * Radio); }
    private int startRadioPage { get => CurrentPage > Radio ? (SecuencialPagination ? CurrentPage : endRadioPage) - Radio + 1 : 1; }

    protected override void OnParametersSet()
    {
        var previousLinkEnable = CurrentPage != 1;

        Links = new List<PageModel>();

        Links.Add(new PageModel()
            {
                Text = firstLinkPageText,
                Page = 1,
                Enable = previousLinkEnable,
                Active = true
            });
        Links.Add(new PageModel()
            {
                Text = previousLinkPageText,
                Page = previousLinkPage,
                Enable = previousLinkEnable,
                Active = true
            });

        for (int i = startRadioPage; i <= TotalPages; i++)
        {
            if (Links.Count() >= Radio + 2) break;

            Links.Add(new PageModel
                {
                    Page = i,
                    Active = CurrentPage == i,
                    Text = $"{i}"
                });
        }

        var linkNextEnable = CurrentPage != TotalPages;
        Links.Add(new PageModel
            {
                Text = nextLinkPageText,
                Page = nextLinkPage,
                Enable = linkNextEnable,
                Active = true
            });

        Links.Add(new PageModel()
            {
                Text = lastLinkPageText,
                Page = TotalPages,
                Enable = linkNextEnable,
                Active = true
            });
    }

    private async Task InternalSelectedPage(PageModel pageModel)
    {
        if (pageModel.Page == CurrentPage || !pageModel.Enable)
        {
            return;
        }

        await SelectedPage.InvokeAsync(pageModel.Page);
    }

    class PageModel
    {
        public string Text { get; set; } = null!;
        public int Page { get; set; }
        public bool Enable { get; set; } = true;
        public bool Active { get; set; } = false;
    }

}
